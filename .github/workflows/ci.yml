name: CDK Build and Synth

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache npm packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.20.0'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Synthesize CDK app
        run: npx cdk synth

      # - name: Archive cdk.out
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: cdk-out
      #     path: cdk.out

      # - name: Archive compiled js
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: js
      #     path: |
      #       **/*.js

  test-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy a lambda
        uses: ./.github/actions/local-lambda
        with:
          path: './lambdas/validate'
          handler: 'validate.handler'
          github_token: ${{ secrets.GITHUB_TOKEN }}  # enables caching for layers.

      - name: Send test request
        run: |
          response=$(curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}')
          echo $response | grep '{"result": "success"}'


  local-deployment:
    # needs:
    #   - build
    #   - test-lambda
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack
        env:
          SERVICES: "s3,lambda"
        ports:
          - 4572:4572
          - 9000:9000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials  # MG or use cdklocal
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region "$AWS_DEFAULT_REGION"

      # - name: Install LocalStack CLI
      #   run: pip install localstack

      # - name: Start LocalStack
      #   run: localstack start

      - name: Install dependencies  # MG is there a way to cache this?
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy CDK stack against LocalStack
        run: |
          export AWS_ENDPOINT_URL="http://localhost:4572"
          npx cdk deploy --require-approval never
